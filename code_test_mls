# import necessary libs
import statsmodels.formula.api as smf
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from numpy import nan
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
sns.set()

# data import and overview
import_data = "Data_test.xlsx"
df = pd.read_excel(import_data)
df = df.set_index("Entity")
print(df)

print(df.shape)
print(len(df))
print(df.describe())
print(df.loc[:, df.isnull().any()])
print(df.isnull().sum())
print(df.isnull().sum())
print(df.head(-20))

"""# exploratory plots
gdp_max = df["GDP"].max()
label_ger = df.loc["Germany"]
label_chn = df.loc["China"]
plt.figure(figsize=(12, 4))
sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap="viridis")
plt.show()
sns.distplot(df["GDP"], color="purple", bins=10)
plt.show()

plt.scatter(label_ger["Coal consumption per capita"],
            label_ger["Co2e"], color="blue", label=label_ger)
plt.xlabel("Kohleverbrauch pro Kopf in Tonnen Erdöl")
plt.ylabel("CO2 Verbrauch pro Kopf in Tonnen Erdöl")
plt.show()
plt.scatter(label_ger["Year"], label_ger["GDP"],
            marker="o", color="green", label=label_ger)
plt.scatter(label_chn["Year"], label_chn["GDP"],
            marker="o", color="red", label=label_chn)
plt.style.use("ggplot")
plt.xlabel("Jahr")
plt.ylabel("Bruttoinlandsprodukt in 10 hoch 12 $")
# plt.legend(loc="upper left") # to modify
plt.title("Falafelburger")
plt.show()

# regression, kausaler zsmhang
sns.lmplot(x="Year", y="GDP", data=label_ger)
sns.lmplot(x="Year", y="GDP", data=label_chn)
plt.xlabel("Jahr")
plt.ylabel("Bruttoinlandsprodukt in 10 hoch 12 $")
plt.show()"""

# regression plot between coal consumption (feature) and co2e (target)
X = df["Coal consumption per capita"].values.reshape(-1, 1)
y = df["Co2e"].values.reshape(-1, 1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = LinearRegression()
model.fit(X, y)
prediction_space = np.linspace(min(X), max(X)).reshape(-1, 1)
y_pred = model.predict(prediction_space)
score_model = model.score(X_test, y_test)
print("\nScore of model: ", score_model)
plt.xlabel("Coal consumption per capita in tonnes equal oil")
plt.ylabel("Co2e per capita in tonnes equal oil")
plt.scatter(X, y, color="red")
plt.plot(prediction_space, y_pred, color="black", linewidth=4)
plt.show()

# initiate supervised maschine learning model Regression and get models performance
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
steps = [("StandardScaler", StandardScaler()), ("RidgeReg", Ridge())]
pipeline = Pipeline(steps)
pipeline.fit(X, y)
y_pred = pipeline.predict(X_test)
score_model = pipeline.score(X_test, y_test)
print("\nScore of model: ", score_model)

# Finetune model and look for best options
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
ridge = Ridge()
param_grid = {"alpha": np.arange(start=0.1, stop=1.1, step=0.1)}
ridge_cv = GridSearchCV(ridge, param_grid, cv=10)
ridge_cv.fit(X, y)
print("\n best parameter to choose: ", ridge_cv.best_params_)
print("\n best score:", ridge_cv.score)
